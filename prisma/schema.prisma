// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id             String    @id @unique @default(uuid())
  username       String    @unique
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)
  cards          Card[]
  coins          Int       @default(1000)
  lastCollected  DateTime  @default(now())
  tradesSent     Trade[]   @relation("sender")
  tradesReceived Trade[]   @relation("receiver")
  followers      Follows[] @relation("follower")
  following      Follows[] @relation("following")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Pack {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
  price     Int
  coverGif  String
  tags      String[]
}

model Card {
  id        String          @id @unique @default(uuid())
  name      String
  gif       String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  pack      Pack            @relation(fields: [packId], references: [id])
  packId    String
  owner     User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  trades    CardsInTrades[]
  source    String
}

model Trade {
  id         String          @id @unique @default(uuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  status     TradeStatus
  sender     User?           @relation(fields: [senderId], references: [id], name: "sender", onDelete: SetNull)
  senderId   String?
  receiver   User?           @relation(fields: [receiverId], references: [id], name: "receiver", onDelete: SetNull)
  receiverId String?
  cards      CardsInTrades[]
}

model CardsInTrades {
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  tradeId String
  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId  String

  @@id([tradeId, cardId])
}
